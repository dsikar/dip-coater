/*
*************************************************************
; PROJECT:   Tour1.hpr
; Project Created 31/12/2009 14:45:43 by HIDmaker
; Copyright (c) 2005 by Trace Systems, Inc.  

 File created: 31/12/2009 14:48:51
 Product Name (project description): Dip Coater
 Mfr. Name: Construmaq


 Filename: Tour1_M.cs

 Generated by HIDmaker FS ver. 1.5.0.1 [Copyright (c) 2005 by Trace Systems, Inc.]

*************************************************************
*/


using System;
using System.Drawing;
using System.Drawing.Printing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Runtime.InteropServices;
using System.Windows.Forms.Design;
using System.IO;


namespace Tour1
{
	/// <summary>
	/// Summary description for MainForm.
	/// </summary>
	public class MainForm : System.Windows.Forms.Form
	{
    public System.Windows.Forms.Button HelpBtn;
    public System.Windows.Forms.CheckBox ContinuousCB;
    public System.Windows.Forms.Button SendRptsBtn;
    public System.Windows.Forms.Button ReadRptsBtn;
    public System.Windows.Forms.Button SaveBtn;
    public System.Windows.Forms.Button PrintBtn;
    public System.Windows.Forms.Button ClearBtn;
    public System.Windows.Forms.TextBox ResultsMemo;
    public System.Windows.Forms.Label Label1;
    private AxHIDagentXControl1.AxHIDagentX axHIDagentX1;
    public System.Windows.Forms.ToolTip ToolTip1;
    public System.Windows.Forms.Timer Timer1;
    private System.ComponentModel.IContainer components;
    
    //******************************************************
    //  Declare API functions to display WinHelp files:
    //****************************************************** 
    [DllImport("user32.dll")]
      public static extern int WinHelp(int hwnd, String lpHelpFile, int wCommand, int dwData);
    
    // WinHelp command to display help Table of Contents
    private const int HELP_FINDER = 11;

    // WinHelp "Display topic" command
    private const int HELP_CONTEXT = 1;

    //***************************************************************
    // Local variable(s)
    //***************************************************************
    int RESULTSMEMO_HT_AS_DESIGNED;
    int RESULTSMEMO_WD_AS_DESIGNED;
    int MAINFORM_HT_AS_DESIGNED;
    int MAINFORM_WD_AS_DESIGNED;
    bool JustStarting;
    bool IsInitializing = true;
    private Font printFont;
    private int LineIndex, LineCount;
    private string[] LineArray;
    private ArrayList USBDipCoater;
    private Random RandomNum = new Random();

    //******************************************************
    //  Creation / Destruction / Resize stuff:
    //******************************************************
	
    public MainForm()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//
		}
    //---------------------------------------------------------------------------


		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}
    //---------------------------------------------------------------------------


		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
      this.components = new System.ComponentModel.Container();
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(MainForm));
      this.HelpBtn = new System.Windows.Forms.Button();
      this.ContinuousCB = new System.Windows.Forms.CheckBox();
      this.SendRptsBtn = new System.Windows.Forms.Button();
      this.ReadRptsBtn = new System.Windows.Forms.Button();
      this.SaveBtn = new System.Windows.Forms.Button();
      this.PrintBtn = new System.Windows.Forms.Button();
      this.ClearBtn = new System.Windows.Forms.Button();
      this.ResultsMemo = new System.Windows.Forms.TextBox();
      this.Label1 = new System.Windows.Forms.Label();
      this.axHIDagentX1 = new AxHIDagentXControl1.AxHIDagentX();
      this.ToolTip1 = new System.Windows.Forms.ToolTip(this.components);
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      ((System.ComponentModel.ISupportInitialize)(this.axHIDagentX1)).BeginInit();
      this.SuspendLayout();
      // 
      // HelpBtn
      // 
      this.HelpBtn.BackColor = System.Drawing.SystemColors.Control;
      this.HelpBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.HelpBtn.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.HelpBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.HelpBtn.Location = new System.Drawing.Point(400, 8);
      this.HelpBtn.Name = "HelpBtn";
      this.HelpBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.HelpBtn.Size = new System.Drawing.Size(105, 25);
      this.HelpBtn.TabIndex = 13;
      this.HelpBtn.Text = "Help";
      this.HelpBtn.Click += new System.EventHandler(this.HelpBtn_Click);
      // 
      // ContinuousCB
      // 
      this.ContinuousCB.BackColor = System.Drawing.SystemColors.Control;
      this.ContinuousCB.Cursor = System.Windows.Forms.Cursors.Default;
      this.ContinuousCB.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.ContinuousCB.ForeColor = System.Drawing.SystemColors.ControlText;
      this.ContinuousCB.Location = new System.Drawing.Point(256, 8);
      this.ContinuousCB.Name = "ContinuousCB";
      this.ContinuousCB.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.ContinuousCB.Size = new System.Drawing.Size(129, 25);
      this.ContinuousCB.TabIndex = 12;
      this.ContinuousCB.Text = "Update Continuously";
      this.ContinuousCB.CheckStateChanged += new System.EventHandler(this.ContinuousCB_CheckStateChanged);
      // 
      // SendRptsBtn
      // 
      this.SendRptsBtn.BackColor = System.Drawing.SystemColors.Control;
      this.SendRptsBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.SendRptsBtn.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.SendRptsBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.SendRptsBtn.Location = new System.Drawing.Point(136, 8);
      this.SendRptsBtn.Name = "SendRptsBtn";
      this.SendRptsBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.SendRptsBtn.Size = new System.Drawing.Size(105, 25);
      this.SendRptsBtn.TabIndex = 11;
      this.SendRptsBtn.Text = "Send All Reports";
      this.SendRptsBtn.Click += new System.EventHandler(this.SendRptsBtn_Click);
      // 
      // ReadRptsBtn
      // 
      this.ReadRptsBtn.BackColor = System.Drawing.SystemColors.Control;
      this.ReadRptsBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.ReadRptsBtn.Font = new System.Drawing.Font("Arial", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.ReadRptsBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.ReadRptsBtn.Location = new System.Drawing.Point(16, 8);
      this.ReadRptsBtn.Name = "ReadRptsBtn";
      this.ReadRptsBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.ReadRptsBtn.Size = new System.Drawing.Size(105, 25);
      this.ReadRptsBtn.TabIndex = 10;
      this.ReadRptsBtn.Text = "Read All Reports";
      this.ReadRptsBtn.Click += new System.EventHandler(this.ReadRptsBtn_Click);
      // 
      // SaveBtn
      // 
      this.SaveBtn.BackColor = System.Drawing.SystemColors.Control;
      this.SaveBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.SaveBtn.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.SaveBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.SaveBtn.Location = new System.Drawing.Point(408, 48);
      this.SaveBtn.Name = "SaveBtn";
      this.SaveBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.SaveBtn.Size = new System.Drawing.Size(121, 17);
      this.SaveBtn.TabIndex = 17;
      this.SaveBtn.Text = "SAVE  Results to File";
      this.SaveBtn.Click += new System.EventHandler(this.SaveBtn_Click);
      // 
      // PrintBtn
      // 
      this.PrintBtn.BackColor = System.Drawing.SystemColors.Control;
      this.PrintBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.PrintBtn.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.PrintBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.PrintBtn.Location = new System.Drawing.Point(304, 48);
      this.PrintBtn.Name = "PrintBtn";
      this.PrintBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.PrintBtn.Size = new System.Drawing.Size(97, 17);
      this.PrintBtn.TabIndex = 16;
      this.PrintBtn.Text = "PRINT   Results";
      this.PrintBtn.Click += new System.EventHandler(this.PrintBtn_Click);
      // 
      // ClearBtn
      // 
      this.ClearBtn.BackColor = System.Drawing.SystemColors.Control;
      this.ClearBtn.Cursor = System.Windows.Forms.Cursors.Default;
      this.ClearBtn.Font = new System.Drawing.Font("Arial", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.ClearBtn.ForeColor = System.Drawing.SystemColors.ControlText;
      this.ClearBtn.Location = new System.Drawing.Point(200, 48);
      this.ClearBtn.Name = "ClearBtn";
      this.ClearBtn.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.ClearBtn.Size = new System.Drawing.Size(97, 17);
      this.ClearBtn.TabIndex = 15;
      this.ClearBtn.Text = "CLEAR   Results";
      this.ClearBtn.Click += new System.EventHandler(this.ClearBtn_Click);
      // 
      // ResultsMemo
      // 
      this.ResultsMemo.AcceptsReturn = true;
      this.ResultsMemo.AutoSize = false;
      this.ResultsMemo.BackColor = System.Drawing.SystemColors.Window;
      this.ResultsMemo.Cursor = System.Windows.Forms.Cursors.IBeam;
      this.ResultsMemo.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.ResultsMemo.ForeColor = System.Drawing.SystemColors.WindowText;
      this.ResultsMemo.Location = new System.Drawing.Point(8, 64);
      this.ResultsMemo.MaxLength = 0;
      this.ResultsMemo.Multiline = true;
      this.ResultsMemo.Name = "ResultsMemo";
      this.ResultsMemo.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.ResultsMemo.ScrollBars = System.Windows.Forms.ScrollBars.Both;
      this.ResultsMemo.Size = new System.Drawing.Size(521, 249);
      this.ResultsMemo.TabIndex = 14;
      this.ResultsMemo.Text = "";
      this.ResultsMemo.WordWrap = false;
      // 
      // Label1
      // 
      this.Label1.BackColor = System.Drawing.SystemColors.Control;
      this.Label1.Cursor = System.Windows.Forms.Cursors.Default;
      this.Label1.Font = new System.Drawing.Font("Arial", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.Label1.ForeColor = System.Drawing.SystemColors.ControlText;
      this.Label1.Location = new System.Drawing.Point(8, 48);
      this.Label1.Name = "Label1";
      this.Label1.RightToLeft = System.Windows.Forms.RightToLeft.No;
      this.Label1.Size = new System.Drawing.Size(49, 17);
      this.Label1.TabIndex = 18;
      this.Label1.Text = "Results:";
      // 
      // axHIDagentX1
      // 
      this.axHIDagentX1.Location = new System.Drawing.Point(88, 40);
      this.axHIDagentX1.Name = "axHIDagentX1";
      this.axHIDagentX1.OcxState = ((System.Windows.Forms.AxHost.State)(resources.GetObject("axHIDagentX1.OcxState")));
      this.axHIDagentX1.Size = new System.Drawing.Size(24, 24);
      this.axHIDagentX1.TabIndex = 19;
      this.axHIDagentX1.Visible = false;
      this.axHIDagentX1.OnDisconnect += new AxHIDagentXControl1.IHIDagentXEvents_OnDisconnectEventHandler(this.axHIDagentX1_OnDisconnect);
      this.axHIDagentX1.OnCloseIntf += new AxHIDagentXControl1.IHIDagentXEvents_OnCloseIntfEventHandler(this.axHIDagentX1_OnCloseIntf);
      this.axHIDagentX1.OnRptSelection += new AxHIDagentXControl1.IHIDagentXEvents_OnRptSelectionEventHandler(this.axHIDagentX1_OnRptSelection);
      this.axHIDagentX1.OnDisplay += new AxHIDagentXControl1.IHIDagentXEvents_OnDisplayEventHandler(this.axHIDagentX1_OnDisplay);
      this.axHIDagentX1.OnConnect += new AxHIDagentXControl1.IHIDagentXEvents_OnConnectEventHandler(this.axHIDagentX1_OnConnect);
      this.axHIDagentX1.OnOpenIntf += new AxHIDagentXControl1.IHIDagentXEvents_OnOpenIntfEventHandler(this.axHIDagentX1_OnOpenIntf);
      this.axHIDagentX1.OnRptArrival += new AxHIDagentXControl1.IHIDagentXEvents_OnRptArrivalEventHandler(this.axHIDagentX1_OnRptArrival);
      // 
      // Timer1
      // 
      this.Timer1.Tick += new System.EventHandler(this.Timer1_Tick);
      // 
      // MainForm
      // 
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(536, 318);
      this.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                  this.axHIDagentX1,
                                                                  this.Label1,
                                                                  this.SaveBtn,
                                                                  this.PrintBtn,
                                                                  this.ClearBtn,
                                                                  this.ResultsMemo,
                                                                  this.HelpBtn,
                                                                  this.ContinuousCB,
                                                                  this.SendRptsBtn,
                                                                  this.ReadRptsBtn});
      this.MinimumSize = new System.Drawing.Size(544, 352);
      this.Name = "MainForm";
      this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
      this.Text = "MainForm";
      this.Resize += new System.EventHandler(this.MainForm_Resize);
      this.Load += new System.EventHandler(this.MainForm_Load);
      this.Closed += new System.EventHandler(this.MainForm_Closed);
      ((System.ComponentModel.ISupportInitialize)(this.axHIDagentX1)).EndInit();
      this.ResumeLayout(false);

    }
		#endregion

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main() 
		{
			Application.Run(new MainForm());
		}
    //---------------------------------------------------------------------------


    private void MainForm_Load(object sender, System.EventArgs e)
    {
      //
      JustStarting = true;
      USBDipCoater = new ArrayList();

      // Record the initial height and width of this form, for use in the
      // FormResize event handler
      RESULTSMEMO_HT_AS_DESIGNED = ResultsMemo.Height;
      RESULTSMEMO_WD_AS_DESIGNED = ResultsMemo.Width;
      MAINFORM_HT_AS_DESIGNED = this.Height;
      MAINFORM_WD_AS_DESIGNED = this.Width;
		
      // Set caption of main form for this particular project
      this.Text = "Test program for HIDmaker project: " + TUSBDipCoater.HM_PROJECT_NAME;


      // Initialize "Results" display
      ClearBtn_Click(ClearBtn, new System.EventArgs() );
		
      // Create & start up HIDagent, & establish connection to our expected device
      CreateHidObjects();
      if ( OpenOurHid() ) 
      {
        EnableUserControls(true);
      }
      else
      {
        Application.Exit();
      }
       
       
		  JustStarting = false;
      IsInitializing = false;
    }  // private void MainForm_Load()
    //---------------------------------------------------------------------------


    private void MainForm_Closed(object sender, System.EventArgs e)
    {
      //
      DestroyHidObjects();
      //MyDevList.Clear;

    }  // private void MainForm_Closed()
    //---------------------------------------------------------------------------

    private void MainForm_Resize(object sender, System.EventArgs e)
    {
      int DX, DY;

      //
      if (!IsInitializing)
      {
        //
        DX = this.Width - MAINFORM_WD_AS_DESIGNED;
        DY = this.Height - MAINFORM_HT_AS_DESIGNED;
        ResultsMemo.Width = RESULTSMEMO_WD_AS_DESIGNED + DX;
        ResultsMemo.Height = RESULTSMEMO_HT_AS_DESIGNED + DY;
      }
    }  // private void MainForm_Resize()
    //---------------------------------------------------------------------------


    private void HelpBtn_Click(object sender, System.EventArgs e)
    {
      int lResult;
      String sHelpFile;
      int lCommand, lOption;

      // USB Advisor:
      // The following 4 lines display a WinHelp file
      sHelpFile = "PCsideH.hlp";
      lCommand = HELP_FINDER;
      lOption = 0;
      lResult = WinHelp(this.Handle.ToInt32(), sHelpFile, lCommand, lOption);

      // USB Advisor:
      // If you want to display an HTML help file instead, then comment out the
      // 4 lines that display the WinHelp file above, and enable the next line:
      //Help.ShowHelp(this, "MyHelpFile.chm");
    }  // private void HelpBtn_Click()
    //---------------------------------------------------------------------------


    /// <summary>
    /// Start everything up!
    /// </summary>
    private bool OpenOurHid()
    {
      bool Success, GiveUp;
      DialogResult Choice;
      string ErrStr;
      //
      do
      {
        axHIDagentX1.VID_To_Match = TUSBDipCoater.MY_VID;
        axHIDagentX1.PID_to_Match = TUSBDipCoater.MY_PID;
        axHIDagentX1.SearchOnPID = true;
        axHIDagentX1.SearchOnVID = true;
        GiveUp = false;
        Success = axHIDagentX1.OpenAllMatchingIntfs();
        if (!Success)
        {
          //Console.Beep();    // NOTE: Console.Beep() is unavailable in .NET 1.x
          ErrStr = "Unable to open USB device: \r\n\r\n";
          ErrStr += TUSBDipCoater.MY_PROD;
          ErrStr += "\r\n\r\nPlease attach the device and click OK,\r\n";
          ErrStr += "  or click Cancel to exit";
          Choice = MessageBox.Show (ErrStr, "HIDmaker FS PC Application", 
            MessageBoxButtons.OKCancel, MessageBoxIcon.Information);

          GiveUp = (Choice == DialogResult.Cancel);
          

        }  // if (!Success)
      }
      while (!(Success || GiveUp));
      return Success;
    }  // private bool OpenOurHid()
    //---------------------------------------------------------------------------


    private void CreateHidObjects()
    {
      //
      // Start everything up!
      axHIDagentX1.ShowOperations = false;
      axHIDagentX1.Verbose = false;
      axHIDagentX1.Startup();

    }  // private void CreateHidObjects()
    //---------------------------------------------------------------------------


    private void DestroyHidObjects()
    {

      axHIDagentX1.Shutdown();

    }  // private void DestroyHidObjects()
    //---------------------------------------------------------------------------


    //******************************************************
    //  Code to manage "Results" display:
    //****************************************************** 

    public void AddToResults(string aLine)
    {
      // Appends any diagnostic strings, arriving from HIDagent's OnDisplay event,
      // to our ResultsMemo display
      ResultsMemo.Text += aLine + "\r\n";
    }  // public void AddToResults(string aLine)
    //---------------------------------------------------------------------------


    private void ClearBtn_Click(object sender, System.EventArgs e)
    {
      string AStr;
      //
      // Clear & Initialize "Results" display
      //
      ResultsMemo.Clear();
      AStr = "USBDipCoater test results:  ";
      AStr += DateTime.Now.ToShortTimeString() + " ";
      AStr += DateTime.Now.ToShortDateString();
      ResultsMemo.Text = AStr + "\r\n";
    }  // private void ClearBtn_Click()
    //---------------------------------------------------------------------------


    private void PrintBtn_Click(object sender, System.EventArgs e)
    {
      //
      try
      {
        //
        printFont = ResultsMemo.Font;
        PrintDocument pd = new PrintDocument();
        pd.PrintPage += new PrintPageEventHandler(pd_PrintPage);

        // The following lines set the default margins, in units of .01 inchs
        //( .NET seems to set default margins at 100 units or 1 inch.)
        pd.DefaultPageSettings.Margins.Left = 25;
        pd.DefaultPageSettings.Margins.Top = 25;

        //Print the document
        LineArray = ResultsMemo.Lines;
        LineCount = ResultsMemo.Lines.GetUpperBound(0);
        LineIndex = 0;

        //Let's add a print dialog
        PrintDialog prDlg = new PrintDialog();
        prDlg.Document = pd;
        DialogResult result = prDlg.ShowDialog();

        if (result == DialogResult.OK) 
        {
          pd.Print();
        }
        //
      }
      catch (Exception ex)
      {
        // add a message box here...
        MessageBox.Show("A printing error occurred: "+ex.Message);
      }

    }  // private void PrintBtn_Click()
    //---------------------------------------------------------------------------


    private void pd_PrintPage(object Sender, PrintPageEventArgs ev)
    {
      float linesPerPage = 0;
      float yPos = 0;
      int count = 0;
      float leftMargin = ev.MarginBounds.Left;
      float topMargin = ev.MarginBounds.Top;
      string line = null;

      // Calculate the number of lines per page.
      linesPerPage = ev.MarginBounds.Height /
         printFont.GetHeight(ev.Graphics);

      // Print each line of the file.
      while (count < linesPerPage && (LineIndex < LineCount))
      {
        line = LineArray[LineIndex++];

        yPos = topMargin + (count * printFont.GetHeight(ev.Graphics));
        ev.Graphics.DrawString(line, printFont, Brushes.Black, leftMargin, yPos, new StringFormat());
        count++;
      }

      // If more lines exist, print another page.
      if (LineIndex < LineCount)
        ev.HasMorePages = true;
      else
        ev.HasMorePages = false;
    }  // private void pd_PrintPage()
    //---------------------------------------------------------------------------


    private void SaveBtn_Click(object sender, System.EventArgs e)
    {
      // This handler uses a .NET SaveFileDialog
      SaveFileDialog SaveDlg = new SaveFileDialog();

      SaveDlg.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
      SaveDlg.FilterIndex = 1;
      SaveDlg.RestoreDirectory = true;

      if (SaveDlg.ShowDialog() == DialogResult.OK) {
        StreamWriter myStreamWriter = new StreamWriter(SaveDlg.FileName);
        if (myStreamWriter != null) {
          // Code to write the stream goes here.
          myStreamWriter.Write(ResultsMemo.Text);
          myStreamWriter.Close();
        }
      }

    }  // private void SaveBtn_Click()
    //---------------------------------------------------------------------------


    //******************************************************
    //  Misc methods:
    //****************************************************** 

    
    private TUSBDipCoater LatestUSBDipCoater()
    {
      if (USBDipCoater.Count > 0)
        return (TUSBDipCoater)USBDipCoater[USBDipCoater.Count - 1];
      else
        return null;
    }  // private TUSBDipCoater Latesttest1()
    //---------------------------------------------------------------------------



    //*****************************************************************
    //  HIDagent Event Handlers
    //*****************************************************************

    private void axHIDagentX1_OnConnect(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnConnectEvent e)
    {
      string AStr;

      // Tell the folks what just happened
      AStr = "+ + + " + e.newIntfName + " has just been CONNECTED. + + +";
      AddToResults(AStr);
      AStr = "(There are now " + e.numConnected.ToString() + " HID interfaces connected)";
      AddToResults(AStr);

      // If newly-connected device contains a "known" Interface, then we'd better open it
      if (!JustStarting)
        axHIDagentX1.OpenAllMatchingIntfs();

      // If desired, add code here to update our displays:

    }  // private void axHIDagentX1_OnConnect()
    //---------------------------------------------------------------------------


    private void axHIDagentX1_OnOpenIntf(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnOpenIntfEvent e)
    {
      string AStr;
      TUSBDipCoater aUSBDipCoater;
      bool IsNew;

      // Tell the folks what just happened
      AStr = "+ + + " + e.intfName + " has just been OPENED. + + +";
      AddToResults(AStr);
      AStr = "(There are now " + e.numOpen.ToString() + " HID interfaces open)";
      AddToResults(AStr);

      // If this is a Composite device, each Interface must be opened
      // separately, but each contains only SOME of the variables contained
      // in our TUSBDipCoater object.  This means we have to call the
      // TUSBDipCoater.Startup method when each of the associated Interfaces is
      // opened, in order to bind all the HID variables in the device to
      // the more easily usable properties of the Ttest1 object.
      //
      // We assume that all the Interfaces from a Composite device all get opened
      // in sequence, with no intervening "unknown" devices...
      IsNew = true;
      if (LatestUSBDipCoater() == null)
        aUSBDipCoater = new TUSBDipCoater(); // 1st new device: no Ttest1 objects yet
      else
        {
          if (LatestUSBDipCoater().UnboundVarCount() == 0)
              aUSBDipCoater = new TUSBDipCoater();  // <-- new device
            else
              {
                aUSBDipCoater = LatestUSBDipCoater();  // <-- still need to bind more vars in this device
                IsNew = false;
              }
        }

      // See if this newly-opened HID interface is expected by TUSBDipCoater object
      // If device is unknown, BindVars returns -1, so we can discard aUSBDipCoater object
        if (aUSBDipCoater.BindVars(axHIDagentX1) >= 0)
        {
          // Yes, this is a known device. If aUSBDipCoater is newly created, add it to
          // the list and hook up its events
          if (IsNew)
            {
              USBDipCoater.Add(aUSBDipCoater);

              // Connect events from HIDagent to aUSBDipCoater object
              aUSBDipCoater.BindEvents();
            }
        }

      // If desired, add code here to update our displays:

    }  // private void axHIDagentX1_OnOpenIntf()
    //---------------------------------------------------------------------------


    private void axHIDagentX1_OnCloseIntf(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnCloseIntfEvent e)
    {
      string AStr;
      int i;
      TUSBDipCoater AUSBDipCoater;
      int IFNum;

      // Tell the folks what just happened
      AStr = "+ + + "+ e.intfName+"  (handle = 0x"+e.intfHandle.ToString("x") + " has just been CLOSED. + + +";
      AddToResults(AStr);
      AStr = "(There are now " + e.numStillOpen.ToString() + " HID interfaces open)";
      AddToResults(AStr);

      // We need to remove this device from our MyDevList
      for (i = USBDipCoater.Count - 1; i >= 0; i--)
        {
          AUSBDipCoater = (TUSBDipCoater)USBDipCoater[i];
          if (AUSBDipCoater.HasHandle(e.intfHandle))
            {
              AUSBDipCoater.Shutdown();
              USBDipCoater.RemoveAt(i);
              // If any device has been deleted, we need to turn off
              // continuous HID I/O
              ContinuousCB.Checked = false;
              ContinuousCB_CheckStateChanged(sender, new System.EventArgs());
            }
        }

      // Now we need to re-bind all of the remaining devices

      for (i=0; i < USBDipCoater.Count; i++)
      {
        AUSBDipCoater = (TUSBDipCoater)USBDipCoater[i];
        IFNum = axHIDagentX1.SelectOpenedIntf(i);
        axHIDagentX1.SetCurrentIntfNum(IFNum);
        AUSBDipCoater.ReBind(axHIDagentX1);
      }

      // If desired, add code here to update our displays:

    }  // private void axHIDagentX1_OnCloseIntf()
    //---------------------------------------------------------------------------


    private void axHIDagentX1_OnDisconnect(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnDisconnectEvent e)
    {
      string AStr;

      // Tell the folks what just happened
      AStr = "+ + + " + e.intfName + " has just been DISCONNECTED. + + +";
      AddToResults(AStr);
      AStr = "(There are now " + e.numConnected.ToString() + " HID interfaces connected)";
      AddToResults(AStr);

      // If desired, add code here to update our displays:

    }  // private void axHIDagentX1_OnDisconnect()
    //---------------------------------------------------------------------------



    private void axHIDagentX1_OnRptArrival(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnRptArrivalEvent e)
    {
      string AStr;

      // Tell the folks what just happened
      AStr = "+ + + A Report has just ARRIVED. + + +";
      AddToResults(AStr);
      AStr = "  Report num in current Interface = " + e.rptIndexInIntf.ToString();
      AddToResults(AStr);
      AStr = "  Report num in global report list = " + e.allRptIndex.ToString();
      AddToResults(AStr);
      AddToResults("");

      // Add code here to update our displays if necessary:

    }  // private void axHIDagentX1_OnRptArrival()
    //---------------------------------------------------------------------------


    private void axHIDagentX1_OnRptSelection(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnRptSelectionEvent e)
    {
      //
    }  // private void axHIDagentX1_OnRptSelection()
    //---------------------------------------------------------------------------

    private void axHIDagentX1_OnDisplay(object sender, AxHIDagentXControl1.IHIDagentXEvents_OnDisplayEvent e)
    {
      //
    }  // private void axHIDagentX1_OnDisplay()
    //---------------------------------------------------------------------------



    //******************************************************
    //  Code to perform HID I/O:
    //****************************************************** 

    private void EnableUserControls(bool EnabledState)
    {
      //
      ReadRptsBtn.Enabled = EnabledState;
      SendRptsBtn.Enabled = EnabledState;
      ContinuousCB.Enabled = EnabledState;
    }  // private void EnableUserControls()
    //---------------------------------------------------------------------------


    private void ContinuousCB_CheckStateChanged(object sender, System.EventArgs e)
    {
      Timer1.Enabled = ContinuousCB.Checked;
      // Disable the buttons above ResultsMemo if we are reading continuously
      ClearBtn.Enabled = !ContinuousCB.Checked;
      SaveBtn.Enabled = !ContinuousCB.Checked;
      PrintBtn.Enabled = !ContinuousCB.Checked;
    }  // private void ContinuousCB_CheckStateChanged()
    //---------------------------------------------------------------------------


    private void Timer1_Tick(object sender, System.EventArgs e)
    {
      ReadRptsBtn_Click(this, e);
      SendRptsBtn_Click(this, e);
    }  // private void Timer1_Tick()
    //---------------------------------------------------------------------------


    private void ReadRptsBtn_Click(object sender, System.EventArgs e)
    {
      string AStr;
      int i, DevNum;

      ClearBtn_Click(this, e);

      for (DevNum = 0; DevNum < USBDipCoater.Count; DevNum++)
      {
        AddToResults("");
        AStr = "Device #" + DevNum.ToString() + ":";
        AddToResults(AStr);
        if ( ((TUSBDipCoater)USBDipCoater[DevNum]).ReadAllReports() )
        {
          AStr = "  InVarDirection = " + ((TUSBDipCoater)USBDipCoater[DevNum]).InVarDirection.UnScaledValue.ToString();
          AddToResults(AStr);

          AStr = "  InVarCounter = " + ((TUSBDipCoater)USBDipCoater[DevNum]).InVarCounter.UnScaledValue.ToString();
          AddToResults(AStr);

        }
        else
        {
          //Console.Beep();    // NOTE: Console.Beep() is unavailable in .NET 1.x
          AStr = "+ + + Unable to read from device" + DevNum.ToString() + "! + + +";
          AddToResults(AStr);
        }
      }
    }  // private void ReadRptsBtn_Click()
    //---------------------------------------------------------------------------


    private void SendRptsBtn_Click(object sender, System.EventArgs e)
    {
      string AStr;
      int i, DevNum;
      int MaxVal;


      for (DevNum = 0; DevNum < USBDipCoater.Count; DevNum++)
        {
          AddToResults("");
          AStr = "Device #" + DevNum.ToString() + ":";
          AddToResults(AStr);

      ((TUSBDipCoater)USBDipCoater[DevNum]).OurVarSpeed.UnScaledValue = 39;
      // Activate next 2 lines to send random values
      //MaxVal = 127;
      //((TUSBDipCoater)USBDipCoater[DevNum]).OurVarSpeed.UnScaledValue = RandomNum.Next(MaxVal+1);
      AStr = "  Writing to device: OurVarSpeed = 0x" + 
        ((TUSBDipCoater)USBDipCoater[DevNum]).OurVarSpeed.UnScaledValue.ToString("x");
      AddToResults(AStr);

            if (((TUSBDipCoater)USBDipCoater[DevNum]).WriteAllReports())
            {
              // Success
              AddToResults("  Successfully wrote to device");
            }
          else
            {
              // Failure
              //Console.Beep();    // NOTE: Console.Beep() is unavailable in .NET 1.x
              AStr = "+ + + Unable to send to device"+ DevNum.ToString() + "! + + +";
              AddToResults(AStr);
            }
        }
    }  // private void SendRptsBtn_Click()
    //---------------------------------------------------------------------------


  }  // public class MainForm
}  // namespace Tour1

