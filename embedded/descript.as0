; ###############################################################################
; PROJECT:   Tour1.hpr
; Project Created 27/10/2009 21:37:36 by HIDmaker
; Copyright (c) 2005 by Trace Systems, Inc.  
; Name of this file:           DESCRIPT.ASM
;
; File created: 28/10/2009 17:49:09
; Product Name (project description): HIDmaker FS Quick Tour
; Mfr. Name: Construmaq
;
; Generated by HIDmaker FS ver. 1.5.0.1 [Copyright (c) 2005 by Trace Systems, Inc.]
; Microchip C18 compatible version
; ###############################################################################



;  Enable only ONE SET of the following pairs of lines, to select processor
   list p=18f4550
   #include p18f4550.inc
;   list p=18f2550
;   #include p18f2550.inc
;   list p=18f4455
;   #include p18f4455.inc
;   list p=18f2455
;   #include p18f2455.inc
;   list p=18f4450
;   #include p18f4450.inc
;   list p=18f2450
;   #include p18f2450.inc
   
   #include usb18.inc
   #include pdconsts.inc

  extern InVar1
  extern InVar2
  extern OurVar1

   code

; ******************************************************************
; This Device Descriptor table is polled by the host immediately
; after USB Reset has been released.
; This table defines, among other things, the maximum packet size
; that EP0 can take.
; See section 9.6.1 of the Rev 1.0 USB specification.
;
; The fields of all the following descriptors are APPLICATION DEPENDENT:
; HIDmaker has set these to meet your specifications.
; ******************************************************************


;=============================================================
; DEVICE DESCRIPTOR:  
;=============================================================
DeviceDescriptor:
 global DeviceDescriptor
    retlw  0x12   ;Length of this Device Descriptor
    retlw  DSC_DEV   ;bDescriptorType = 1 for Device Descriptor
    retlw  0x10   ;USB Spec Version (1.1). 2 BCD bytes stored in a Word variable
    retlw  0x01
    retlw  0x00   ;bDeviceClass = 0 for HID class, which is set in Interface Descriptor
    retlw  0x00   ;USB Subclass code, if applicable
    retlw  0x00   ;bDeviceProtocol code, if applicable
    retlw  EP0_BUFF_SIZE   ;Max packet size for EndPoint 0
    retlw  0x11   ;Vendor ID (2 hex bytes)
    retlw  0x11
    retlw  0x11   ;Product ID (2 hex bytes)
    retlw  0x11
    retlw  0x01   ;Device release number (2 hex bytes)
    retlw  0x00
    retlw  0x01   ;Manufacturer name string (gets own String Descriptor)
    retlw  0x02   ;Product Name string (gets own String Descriptor)
    retlw  0x00   ;Serial Number string (gets own String Descriptor)
    retlw  NUM_CONFIGURATIONS   ;No. Configurations for this device



;=============================================================
; CONFIGURATION DESCRIPTOR:  Config1
; Configuration 1
;=============================================================
Config1:
 global Config1
    retlw  0x09   ;Length of this Configuration Descriptor
    retlw  DSC_CFG   ;bDescriptorType = 2 for Configuration Descriptor
Config1Len:
  global Config1Len
    retlw  low  ((EndConfig1 - Config1)/2)   ;Total Config Length 
    retlw  high ((EndConfig1 - Config1)/2)
    retlw  0x01   ;Number of interfaces this configuration supports
    retlw  0x01   ;Configuration ID, used in Get_Configuration and Set_Configuration requests
    retlw  0x03   ;Configuration Name string (gets own String Descriptor)
    retlw  0x80   ;Bitfield: flag bits for Self-Powered & Remote Wakeup
    retlw  0x0A   ;Max current required from USB for this config: = milliAmps / 2


;=============================================================
; INTERFACE DESCRIPTOR:  Interface0
; Config1, Interface 0, Alternate 0
;=============================================================
Interface0:
 global Interface0
    retlw  0x09   ;Length of this Interface Descriptor
    retlw  DSC_INTF   ;bDescriptorType = 4 for Interface Descriptor
    retlw  0x00   ;Interface ID no.
    retlw  0x00   ;If >0, this  Interface Descriptor is an alternate setting
    retlw  0x02   ;No. endpoints supported over and above Endpoint 0
    retlw  0x03   ;HID is class 03h, & is declared HERE
    retlw  0x00   ;This field may specify a subclass within a class
    retlw  0x00   ;May specify a protocol for classes defined by the interface
    retlw  0x04   ;Interface name string (gets own String Descriptor)


;=============================================================
; HID DESCRIPTOR:  HID0
; Config 1, Interface 0, Alt 0 HID Descriptor
;=============================================================
HID0:
HID_Descriptor1:
 global HID_Descriptor1
 global HID0
    retlw  0x09   ;Length of this HID Descriptor
    retlw  0x21   ;bDescriptorType = 21h for HID Descriptor
    retlw  0x10   ;HID Spec release number, in BCD
    retlw  0x01
    retlw  0x00   ;Country code (BCD) for localized hardware, if supported.
    retlw  0x01   ;No. subordinate Report Descriptors under this HID descr.
    retlw  0x22   ;Report Descriptor type
    retlw  low  ((EndReport1 - Report1)/2)   ; Length of Report Descriptor
    retlw  high ((EndReport1 - Report1)/2)


;=============================================================
; ENDPOINT DESCRIPTOR:  EndPoint1In
; Config 1, Interface 0, Alt 0  EndPoint1In
;=============================================================
EndPoint1In:
 global EndPoint1In
    retlw  0x07   ;Length of this Endpoint Descriptor
    retlw  DSC_EP   ;bDescriptorType = 5 for Endpoint Descriptor
    retlw  0x81   ;Endpoint number & direction
    retlw  0x03   ;Transfer type supported by this Endpoint
    retlw  EP1_IN_BUFF_SIZE   ;Max no. data bytes this Endpoint can transfer in a TRANSACTION
    retlw  0x00   ;
    retlw  0x0A   ;Max latency in millisec, 10-255 for low speed devices


;=============================================================
; ENDPOINT DESCRIPTOR:  EndPoint1Out
; Config 1, Interface 0, Alt 0  EndPoint1Out
;=============================================================
EndPoint1Out:
 global EndPoint1Out
    retlw  0x07   ;Length of this Endpoint Descriptor
    retlw  DSC_EP   ;bDescriptorType = 5 for Endpoint Descriptor
    retlw  0x01   ;Endpoint number & direction
    retlw  0x03   ;Transfer type supported by this Endpoint
    retlw  EP1_OUT_BUFF_SIZE   ;Max no. data bytes this Endpoint can transfer in a TRANSACTION
    retlw  0x00   ;
    retlw  0x0A   ;Max latency in millisec, 10-255 for low speed devices

; This is the ending label of whole configuration Config1
; (Needed by the assembler to calc length in config descriptor)

EndConfig1:


; No Config2 exists in this project, but this stub keeps the assembler happy

Config2:
  global Config2


Config2Len:
  global Config2Len
    retlw    0  ; Total length of Config2
    retlw    0



;=============================================================
; REPORT DESCRIPTOR:  Report1
; Config 1, Interface 0, Alt 0  Report1
;=============================================================

Report1:
   retlw  0x06   ;Usage Page (65280),
   retlw  0x00
   retlw  0xFF
   retlw  0x0A   ;Usage (65281),
   retlw  0x01
   retlw  0xFF
   retlw  0xA1   ;Collection ( Application )   ; App_Collection_1
   retlw  0x01
   retlw  0x15   ;  Logical Minimum (-128),
   retlw  0x80
   retlw  0x25   ;  Logical Maximum (127),
   retlw  0x7F
   retlw  0x95   ;  Report Count (1),
   retlw  0x01
   retlw  0x75   ;  Report Size (8),
   retlw  0x08
   retlw  0x05   ;  Usage Page (1),
   retlw  0x01
   retlw  0x09   ;  Usage (48),
   retlw  0x30
   retlw  0x81   ;  Input (Data, Variable, Absolute)   ; InVar1
   retlw  0x02
   retlw  0x09   ;  Usage (49),
   retlw  0x31
   retlw  0x81   ;  Input (Data, Variable, Absolute)   ; InVar2
   retlw  0x02
   retlw  0x09   ;  Usage (62),
   retlw  0x3E
   retlw  0x91   ;  Output (Data, Variable, Absolute)   ; OurVar1
   retlw  0x02
   retlw  0xC0   ;End Collection
; This is the ending label of report descriptor Report1
EndReport1:


; ******************************************************************
; The following tables provide the size and location of all the HID
; class Report Descriptors in this project, which the PC will request
; during the enumeration process.
;
; There are separate tables for Configuration 1 and Configuration 2,
; though even if Configuration 2 is not used in this project, a small
; stub of a table is still required for it.
;
; Each table contains a group of entries for each Interface in the
; Configuration, whether or not the Interface is a HID class Interface
; containing a Report Descriptor.  For non-HID Interfaces, both the
; low and high bytes of the RD_Size and RD_Location entries must be
; set to 0.
; ******************************************************************

C1_RD_Table:
  global C1_RD_Table
    retlw    1    ; Number of element groups in this table
; Report Descriptor in Config 1, Interface 0
    retlw    0    ; Interface number
    retlw  low  ((EndReport1 - Report1)/2)   ; RS_Size: Length of Report Descriptor
    retlw  high ((EndReport1 - Report1)/2)
    retlw  low  Report1               ; RD_Location: Address of Report Descriptor
    retlw  high Report1

C2_RD_Table:
  global C2_RD_Table
    retlw    0    ; Number of element groups in this table

; ************************************************************************
; Variable info tables:
; ====================
; Each one keeps a list of sizes and locations of all the variables
; used in a particular report.  These tables are generated by HIDmaker,
; based on the data you created with the Visual Data Designer.
;
; Each variable gets 3 entries (split across 2 lines) in the table:
;  <Size>, low address, high address
;
; Encoding of Bits in <Size>:
; For Byte, Word, or DWord variables:
;    Bit 7 = 1 if variable is signed
;    Bit 6 = 0 always
;    Bits 5..0 = size of data item in bits
; For Bit variables:
;    Bit 7 = 0 always
;    Bit 6 = 1 to denote a bit variable
;    Bits 5..0 = bit no. (0..7) of this bit variable in byte at <Location>
;
;
; Last byte in each table should always be 0
;
; ************************************************************************

VarTable   CODE_PACK

Ep1RcvVarTable:
  global Ep1RcvVarTable
    db  0x88, low (OurVar1)        ; OurVar1 starts in 1st byte
    db  high (OurVar1), 0x00        ; VarTable ends in 2nd byte


Ep1XmtVarTable:
  global Ep1XmtVarTable
    db  0x88, low (InVar1)        ; InVar1 starts in 1st byte
    db  high (InVar1), 0x88        ; InVar2 starts in 2nd byte
    db  low (InVar2), high (InVar2)
    db  0x00, 0x00        ; VarTable ends in 1st byte


Ep2RcvVarTable:
  global Ep2RcvVarTable
    db  0x00, 0x00        ; VarTable ends in 1st byte


Ep2XmtVarTable:
  global Ep2XmtVarTable
    db  0x00, 0x00        ; VarTable ends in 1st byte


FeatureVarTable:
  global FeatureVarTable
    db  0x00, 0x00        ; VarTable ends in 1st byte


CtlOutVarTable:
  global CtlOutVarTable
    db  0x00, 0x00        ; VarTable ends in 1st byte



; ******************************************************************
; String descriptors, as well as supporting code, start here
; ******************************************************************

StrPtrTbl  CODE_PACK

; String pointer table
USB_SD_Ptr:
  global USB_SD_Ptr
Strings:
  db  low String0_L1, high String0_L1
  db  low String1_L1, high String1_L1
  db  low String2_L1, high String2_L1
  db  low String3_L1, high String3_L1
  db  low String4_L1, high String4_L1
 

StrDescrs   CODE

String0_L1:
  retlw  (String1_L1-String0_L1)/2  ; Length of string
  retlw  DSC_STR                    ; Descriptor type = 3
  retlw  0x09                       ; Language ID (as defined by MS 0x0409)
  retlw  0x04

; Manufacturer name string (gets own String Descriptor)
;  String1 is: "Construmaq"
String1_L1:                                ; Str. Descr. 1, Lang. 1
    retlw  low ((String1_L1_End - String1_L1)/2) ; length of descriptor
    retlw  DSC_STR   ;String Descriptor type = 3
    retlw  'C' 
    retlw  0x00
    retlw  'o' 
    retlw  0x00
    retlw  'n' 
    retlw  0x00
    retlw  's' 
    retlw  0x00
    retlw  't' 
    retlw  0x00
    retlw  'r' 
    retlw  0x00
    retlw  'u' 
    retlw  0x00
    retlw  'm' 
    retlw  0x00
    retlw  'a' 
    retlw  0x00
    retlw  'q' 
    retlw  0x00
String1_L1_End:

; Product Name string (gets own String Descriptor)
;  String2 is: "HIDmaker FS Quick Tour"
String2_L1:                                ; Str. Descr. 2, Lang. 1
    retlw  low ((String2_L1_End - String2_L1)/2) ; length of descriptor
    retlw  DSC_STR   ;String Descriptor type = 3
    retlw  'H' 
    retlw  0x00
    retlw  'I' 
    retlw  0x00
    retlw  'D' 
    retlw  0x00
    retlw  'm' 
    retlw  0x00
    retlw  'a' 
    retlw  0x00
    retlw  'k' 
    retlw  0x00
    retlw  'e' 
    retlw  0x00
    retlw  'r' 
    retlw  0x00
    retlw  ' ' 
    retlw  0x00
    retlw  'F' 
    retlw  0x00
    retlw  'S' 
    retlw  0x00
    retlw  ' ' 
    retlw  0x00
    retlw  'Q' 
    retlw  0x00
    retlw  'u' 
    retlw  0x00
    retlw  'i' 
    retlw  0x00
    retlw  'c' 
    retlw  0x00
    retlw  'k' 
    retlw  0x00
    retlw  ' ' 
    retlw  0x00
    retlw  'T' 
    retlw  0x00
    retlw  'o' 
    retlw  0x00
    retlw  'u' 
    retlw  0x00
    retlw  'r' 
    retlw  0x00
String2_L1_End:

; Configuration Name string (gets own String Descriptor)
;  String3 is: "C1"
String3_L1:                                ; Str. Descr. 3, Lang. 1
    retlw  low ((String3_L1_End - String3_L1)/2) ; length of descriptor
    retlw  DSC_STR   ;String Descriptor type = 3
    retlw  'C' 
    retlw  0x00
    retlw  '1' 
    retlw  0x00
String3_L1_End:

; Interface name string (gets own String Descriptor)
;  String4 is: "C1 I0"
String4_L1:                                ; Str. Descr. 4, Lang. 1
    retlw  low ((String4_L1_End - String4_L1)/2) ; length of descriptor
    retlw  DSC_STR   ;String Descriptor type = 3
    retlw  'C' 
    retlw  0x00
    retlw  '1' 
    retlw  0x00
    retlw  ' ' 
    retlw  0x00
    retlw  'I' 
    retlw  0x00
    retlw  '0' 
    retlw  0x00
String4_L1_End:

 
   end
