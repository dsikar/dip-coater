;=============================================================
;FILE:      usb18mem.asm
; PROJECT:   Tour1.hpr
; Project Created 31/12/2009 14:45:43 by HIDmaker
; Copyright (c) 2005 by Trace Systems, Inc.  
; Generated by HIDmaker FS ver. 1.5.0.1 [Copyright (c) 2005 by Trace Systems, Inc.]
;This file generated 15/01/2010 17:45:38

; Product Name/Project Description: Dip Coater
; Mfr. Name: Construmaq

; Generated by HIDmaker FS ver. 1.5.0.1 [Copyright (c) 2005 by Trace Systems, Inc.]

;=============================================================

; ###############################################################################
; Name of this file:           USB18MEM.ASM
;
; This file was generated by HIDmaker FS [Copyright (c) 2005 by Trace Systems, Inc.]
; Microchip C18 compatible version
; ###############################################################################

;  Enable only ONE SET of the following pairs of lines, to select processor
  list p=18f4550
  #include p18f4550.inc
;   #include p18f4550.inc
;   list p=18f2550
;   #include p18f2550.inc
;   list p=18f4455
;   #include p18f4455.inc
;   list p=18f2455
;   #include p18f2455.inc
;   list p=18f4450
;   #include p18f4450.inc
;   list p=18f2450
;   #include p18f2450.inc
   
  #include usb18.inc
  #include pdconsts.inc
  #include USBwatch.inc

   UDATA_ACS
   
R0   res  2

  global R0
     
USB_RAM   UDATA  
   

; Buffer Descriptor Table (BDT) RAM

#if(0 <= MAX_EP_NUMBER)   ; (See descript.asm)
ep0Bo   res 4   ; Endpoint #0 BD Out
ep0Bi   res 4   ; Endpoint #0 BD In

  global ep0Bo, ep0Bi
#endif

#if(1 <= MAX_EP_NUMBER)
ep1Bo   res 4   ; Endpoint #1 BD Out
ep1Bi   res 4   ; Endpoint #1 BD In

  global ep1Bo, ep1Bi
#endif

#if(2 <= MAX_EP_NUMBER)
ep2Bo   res 4   ; Endpoint #2 BD Out
ep2Bi   res 4   ; Endpoint #2 BD In

  global ep2Bo, ep2Bi
#endif

#if(3 <= MAX_EP_NUMBER)
ep3Bo   res 4   ; Endpoint #3 BD Out
ep3Bi   res 4   ; Endpoint #3 BD In

  global ep3Bo, ep3Bi
#endif

#if(4 <= MAX_EP_NUMBER)
ep4Bo   res 4   ; Endpoint #4 BD Out
ep4Bi   res 4   ; Endpoint #4 BD In

  global ep4Bo, ep4Bi
#endif

#if(5 <= MAX_EP_NUMBER)
ep5Bo   res 4   ; Endpoint #5 BD Out
ep5Bi   res 4   ; Endpoint #5 BD In

  global ep5Bo, ep5Bi
#endif

#if(6 <= MAX_EP_NUMBER)
ep6Bo   res 4   ; Endpoint #6 BD Out
ep6Bi   res 4   ; Endpoint #6 BD In

  global ep6Bo, ep6Bi
#endif

#if(7 <= MAX_EP_NUMBER)
ep7Bo   res 4   ; Endpoint #7 BD Out
ep7Bi   res 4   ; Endpoint #7 BD In

  global ep7Bo, ep7Bi
#endif

#if(8 <= MAX_EP_NUMBER)
ep8Bo   res 4   ; Endpoint #8 BD Out
ep8Bi   res 4   ; Endpoint #8 BD In

  global ep8Bo, ep8Bi
#endif

#if(9 <= MAX_EP_NUMBER)
ep9Bo   res 4   ; Endpoint #9 BD Out
ep9Bi   res 4   ; Endpoint #9 BD In

  global ep9Bo, ep9Bi
#endif

#if(10 <= MAX_EP_NUMBER)
ep10Bo   res 4   ; Endpoint #10 BD Out
ep10Bi   res 4   ; Endpoint #10 BD In

  global ep10Bo, ep10Bi
#endif

#if(11 <= MAX_EP_NUMBER)
ep11Bo   res 4   ; Endpoint #11 BD Out
ep11Bi   res 4   ; Endpoint #11 BD In

  global ep11Bo, ep11Bi
#endif

#if(12 <= MAX_EP_NUMBER)
ep12Bo   res 4   ; Endpoint #12 BD Out
ep12Bi   res 4   ; Endpoint #12 BD In

  global ep12Bo, ep12Bi
#endif

#if(13 <= MAX_EP_NUMBER)
ep13Bo   res 4   ; Endpoint #13 BD Out
ep13Bi   res 4   ; Endpoint #13 BD In

  global ep13Bo, ep13Bi
#endif

#if(14 <= MAX_EP_NUMBER)
ep14Bo   res 4   ; Endpoint #14 BD Out
ep14Bi   res 4   ; Endpoint #14 BD In

  global ep14Bo, ep14Bi
#endif

#if(15 <= MAX_EP_NUMBER)
ep15Bo   res 4   ; Endpoint #15 BD Out
ep15Bi   res 4   ; Endpoint #15 BD In

  global ep15Bo, ep15Bi
#endif


; General RAM (in bank 4)
usb_temp  res	2   ; Temporary storage
pSrc      res	2   ; Source pointer
pDst      res	2   ; Destination pointer

  global usb_temp, pSrc, pDst

; Used for C18 interface
;EpNumber   res   1   ; Endpoint being read or written
;pVarTable  res   2   ; pointer to a VarTable
SavedFSR0  res   2   ; Saved context from C18 call
SavedFSR1  res   2   ; Saved context from C18 call
SavedFSR2  res   2   ; Saved context from C18 call

  global  SavedFSR0, SavedFSR1, SavedFSR2

; (See usbctrltrf.c)
ctrl_trf_state         res  1   ; Control Transfer State
ctrl_trf_session_owner res  1   ; Current transfer session owner
wCount                 res  2   ; Data counter

  global  ctrl_trf_state, ctrl_trf_session_owner, wCount

; (See usbmmap.c)
usb_device_state  res  1            ; Device States: DETACHED, ATTACHED, ...
usb_active_cfg    res  1            ; Value of current configuration
usb_alt_intf      res  MAX_NUM_INT  ; Array to keep track of the current alternate setting for each interface ID
usb_stat          res  1

  global  usb_device_state, usb_active_cfg, usb_alt_intf, usb_stat

; Endpoint 0 buffers
SetupPktLen  res  1  ; Gets initialized to EP0_BUFF_SIZE: used by PutUSB
SetupPkt     res  EP0_BUFF_SIZE + 9  ; (See usbmmap.c & usbdefs_ep0_buff.h - CTRL_TRF_SETUP)
;
CtrlTrfDataLen  res  1  ; Gets initialized to EP0_BUFF_SIZE: used by PutUSB
CtrlTrfData  res  EP0_BUFF_SIZE  ; (See usbmmap.c & usbdefs_ep0_buff.h - CTRL_TRF_DATA)
CtrlTrfDataStorage  res  9  

  global  SetupPktLen, SetupPkt, CtrlTrfDataLen, CtrlTrfData, CtrlTrfDataStorage

#ifdef USB_WATCH
; -----u-s-b-w-a-t-c-h----------------u-s-b-w-a-t-c-h------------

; Variables needed by USBwatch
USBWtemp     res  1
USBWstate    res  1
UmsgBuf      res  10        ; Only needed to send 'U' messages from within USB18.ASM

  global  USBWtemp, USBWstate, UmsgBuf


; -----u-s-b-w-a-t-c-h----------------u-s-b-w-a-t-c-h------------
#endif  ;  #ifdef USB_WATCH


; Packing / unpacking variables (in bank 4)

MaxPacketSize     res	1  ; Depends on endpoint
PacketBitIndex    res	1  ; Index of a bit in PacketByteIndex byte
PacketByteIndex   res	1  ; Points to a byte in packet
TempByte          res	1  ; Temporary storage
TempCount         res	1  ; Temporary loop index
VarBits           res	1  ; "Excess bits" = (total bits) mod 8
VarBytes          res	1  ; Actual no. bytes needed to contain item
VarSign           res	1  ; Contains flags indicating if variable is signed, etc.
VarSize           res	1  ; Total number of bits in an item

  global  MaxPacketSize, PacketBitIndex, PacketByteIndex, TempByte
  global  TempCount, VarBits, VarBytes, VarSign, VarSize

; CDC RAM (in bank 4)

#ifdef  USB_USE_CDC    ; (See usbmmap.c & usbmmap.h)

line_coding                      res  LINE_CODING_LENGTH
control_signal_bitmap            res  1
dummy_encapsulated_cmd_response  res  dummy_length

  global  line_coding, control_signal_bitmap, dummy_encapsulated_cmd_response
  
#endif   ;  #ifdef USB_USE_CDC


; All previous RAM must be in bank 4
; The following buffers may be in any dual-port RAM bank

; CDC Buffer RAM

#ifdef USB_USE_CDC			; (See usbmmap.c & usbmmap.h)

cdc_notice	res	CDC_INT_EP_SIZE + 1	; +1 for size at front
cdc_data_rx	res	CDC_BULK_OUT_EP_SIZE + 1	; +1 for size at front
cdc_data_tx	res	CDC_BULK_IN_EP_SIZE + 1	; +1 for size at front

  global  cdc_notice, cdc_data_rx, cdc_data_tx

#endif  ; #ifdef USB_USE_CDC


; ========= HID Endpoint Buffer RAM Declarations ===========

#ifdef USB_USE_HID

; For Configuration 1: 
; ==================== 
; Declare IN endpoint buffers, if any

EP1_InBuffer   res   EP1_IN_BUFF_SIZE + 10
  global EP1_InBuffer

; Declare OUT endpoint buffers, if any

EP1_OutBuffer   res   EP1_OUT_BUFF_SIZE + 10
  global EP1_OutBuffer


#endif   ; #ifdef USB_USE_HID



  CODE

; ========= Endpoint Initialization Table ===========


; For Configuration 1: 
; ==================== 
; (The number of endpoints in this table must be MAX_EP_NUMBER)

C1_InEpTable:
  global C1_InEpTable
  retlw   1                  ; No. IN endpoints in this table
  retlw   low EP1_InBuffer   ; Addr of Ep1 In
  retlw   high EP1_InBuffer
  retlw   EP1_IN_BUFF_SIZE   ; Size of Ep1 In


; (The number of endpoints in this table must be MAX_EP_NUMBER)

C1_OutEpTable:
  global C1_OutEpTable
  retlw   1                  ; No. OUT endpoints in this table
  retlw   low EP1_OutBuffer   ; Addr of Ep1 Out
  retlw   high EP1_OutBuffer
  retlw   EP1_OUT_BUFF_SIZE   ; Size of Ep1 Out

; No Config2 exists in this project, but these stubs keep the assembler happy

C2_InEpTable:
  global C2_InEpTable
  retlw   0

C2_OutEpTable:
  global C2_OutEpTable
  retlw   0





  end
