/*********************************************************************
 *
 *                  External LCD access routines
 *
 *********************************************************************
 * FileName:        XLCD.c
 * Dependencies:    xlcd.h
 * Processor:       PIC18
 * Complier:        MCC18 v1.00.50 or higher
 *                  HITECH PICC-18 V8.10PL1 or higher
 * Company:         Microchip Technology, Inc.
 *
 * Software License Agreement
 * The software supplied herewith by Microchip Technology Incorporated
 * (the “Company”) for its PICmicro® Microcontroller is intended and
 * supplied to you, the Company’s customer, for use solely and
 * exclusively on Microchip PICmicro Microcontroller products. The
 * software is owned by the Company and/or its supplier, and is
 * protected under applicable copyright laws. All rights are reserved.
 * Any use in violation of the foregoing restrictions may subject the
 * user to criminal sanctions under applicable laws, as well as to
 * civil liability for the breach of the terms and conditions of this
 * license.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * HiTech PICC18 Compiler Options excluding device selection:
 *                  -FAKELOCAL -G -E -C
 *
 * Author               Date    Comment
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Naveen Raj          6/9/03         Original        (Rev 1.0)
 ********************************************************************/
#include "xlcd.h"
#include "delays.h"

#include "xlcd.h"

#define XLCDCursorOnBlinkOn()        XLCDCommand(0x0F)	//the user may refer the LCD data sheet
#define XLCDCursorOnBlinkOff()       XLCDCommand(0x0E)	//and generate commands like this
#define XLCDDisplayOnCursorOff()     XLCDCommand(0x0C)
#define XLCDDisplayOff()             XLCDCommand(0x08)
#define XLCDCursorMoveLeft()         XLCDCommand(0x10)
#define XLCDCursorMoveRight()        XLCDCommand(0x14)
#define XLCDDisplayMoveLeft()        XLCDCommand(0x18)
#define XLCDDisplayMoveRight()       XLCDCommand(0x1C)

// constants
#define LCD_SETCGRAMADDR 0x40
#define BACK_SLASH 0x00
#define UP_ARROW 0x01
#define DOWN_ARROW 0x02
#define HIGH 0x01
#define LOW 0x00
#define byte unsigned char


// prototypes
void eeprom_set_values(void);
void eepromWrite(byte, byte);
byte eepromRead(byte);
void printSpeed(int);
void reverse(char s[]);
void itoa(int n, char s[]);
void XLCD_Welcome(void);
void XLCDPrintDownArrows(void);
void XLCDPrintUpArrows(void);

// control variables
volatile char bChangedOnOffState = 0;
volatile char bChangedUpState = 0;
volatile char bChangedDownState = 0;
volatile char bChangedFasterState = 0;
volatile char bChangedSlowerState = 0;
volatile char bOn = 0;
volatile char bDown = 1; // going down by default

// special characters
unsigned int upArrow[8] = {
	0b00000100,
	0b00001110,
	0b00011111,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100
};

unsigned int downArrow[8] = {
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00000100,
	0b00011111,
	0b00001110,
	0b00000100
};

unsigned int backSlash[8] = {
	0b00000000,
	0b00010000,
	0b00001000,
	0b00000100,
	0b00000010,
	0b00000001,
	0b00000000,
	0b00000000
};

// speed variables
int iSpeed = 0;
// int iMaxSpeed = 10;
// int iMaxSpeed = 169;
/*
Total number of values written to eeprom = 255
Every sequence of 3 values contains the integer and decimal part of the speed (1st and 2nd value)
and the speed itself, to be written to the 16f84A (working as the oscillator).

Max speed = 84

To obtain the speed to be printed to lcd
1. Multiply speed (i) by three.
2. eepromRead(i) = integer part
3. eepromRead(i+1) = decimal part
4. eepromRead(i+2) = speed to be written to oscillator
*/

int iMaxSpeed = 84;
int iMinSpeed = -1;
int lCurrentCounter = 0;
int CONTINUOUS_CHANGE_INTERVAL = 25000;

char line1[]="   CONSTRUMAQ   ";
char line2[]="   DIP COATER   ";
char line3[]="Vel 00,00 cm/min";
char line4[]="                ";

char _vXLCDreg =0;          //Used as a flag to check if from XLCDInit()

/*********************************************************************
 * Function         : void XLCDInit(void)
 * PreCondition     : None
 * Input            : None
 * Output           : None
 * Side Effects     : None
 * Overview         : LCD is intialized
 * Note             : This function will work with all Hitachi HD447780
 *                    LCD controller.
 ********************************************************************/
// additional functions lifted from
// http://www.electro-tech-online.com/microcontrollers/117408-hd44780-timing-problem.html

/*** START DELAY FUNCTIONS ***/

void XLCDDelay2s (void)
{
	/* 	Assuming 5MHz internal clock
	*/
	Delay10KTCYx(250);
	Delay10KTCYx(250);
	Delay10KTCYx(250);
	Delay10KTCYx(250);
    return;
}

void XLCDDelay15ms (void)
{
	/* 	4000000 _ 1
	   	x       _ 0.0015
	   	x = 6000
		Delay1KTCYx(6);
		5000000 _ 1
		x	    _ 0.0015
		x = 7500
		Delay1KTCYx(8);
	*/
	Delay1KTCYx(8); // delaying 8k cyles, instead of 7.5
    return;
}

void XLCDDelay4ms (void)
{
	/*
		5000000 _ 1
		x	    _ 0.0004
		x = 2000
	*/
	Delay1KTCYx(2);
    return;
}

void XLCDDelay2ms(void)
{
	/*
		5000000 _ 1
		x	    _ 0.0002
		x = 1000
	*/
	Delay1KTCYx(1);
    return;
}

void XLCD_Delay500ns(void)
{
	/*
		500 billionths of a second = 1/2 millionth of a second.
		Clock ticking at 5MHz, 5 million cycles per second.
		5 cycles = 1 millionth of a second
		2.5 cycles = 1/2 millionth of a second
	*/
    Nop();
    Nop();
    Nop();
}

void Pulse_E(void)
{
	/*
		In the example given (http://www.electro-tech-online.com/microcontrollers/117408-hd44780-timing-problem.html),
		the author has it "working on a PIC 18F4685 @ 48MHz"
		Delay10TCYx(3); ~ 30000
		48000000 _ 1
		30000    _ x
		x = 0.000625 ~ 625us
       
		Datasheet says on pg 50, "Bus Timing Characteristics"
		Enable pulse width (high level) 450ns minimum
		
		So I'll change this to 500ns.
	*/
	XLCD_ENPIN = 1;
	XLCD_Delay500ns();
	XLCD_ENPIN = 0;
}

void XLCDDelay120ms(void){
	Delay10KTCYx(6);
}

/*** END DELAY FUNCTIONS ***/

void XLCDInit(void)
{
	/*This par of the code is initialization by instruction*/
	_vXLCDreg=1; 

	//end of data port initialization
	//control port initialization
	XLCD_RSPIN_TRIS =0;                         //make control ports output
	XLCD_ENPIN_TRIS =0;	
	XLCD_RSPIN  =0;                             //clear control ports
	XLCD_ENPIN  =0;

    //Lower 4-bits of the DATAPORT output
	XLCD_DATAPORT_TRIS  &= 0xf0;
    XLCD_DATAPORT &= 0xf0;

	// Set control buttons and led, on/off, on/off led, up, down, increment, decrement
	// on/off
	XLCD_ONOFF_TRIS  = 1; // input
    XLCD_LED_TRIS = 0; // output
	XLCD_LED_PIN = 0; // led off
	// up
	XLCD_UP_TRIS = 1; // input
	// down
	XLCD_DOWN_TRIS = 1;
	// increment
	XLCD_FASTER_TRIS = 1;
	// decrement
	XLCD_SLOWER_TRIS = 1;

	//initialization by instruction
	
	/* From datasheet pg 36 :
	Wait for more than 40 ms after VCC rises to 2.7 V
	Wait for more than 15 ms after VCC rises to 4.5 V
	*/
	XLCDDelay15ms(); 

                          // Lower nibble interface
    XLCD_DATAPORT       &= 0xf0;    // Clear lower port
    XLCD_DATAPORT   |= 0b00000011;  // Function set cmd(4-bit interface)

	Pulse_E();
	// Wait for more than 4.1 ms
	XLCDDelay4ms();
	XLCDDelay2ms();

	Pulse_E();
	// Wait for more than 100 µs ~ from datasheet,
	// in practice, 120 ms
	XLCDDelay120ms(); //LCD_Delay();  // 1k cycles Delay1KTCYx(1);
	Pulse_E();
     
	//required only for 4 bit interface as per LCDdatasheet    
  
    XLCD_DATAPORT       &= 0xf0;    // Clear lower port
    XLCD_DATAPORT   |= 0b00000010;  // Function set cmd(4-bit interface)

	Pulse_E();
	XLCDDelay120ms();
	
	//-----------------------------------------------------------------------
	//function set command "0 0 1 DL N F X X"
	//-----------------------------------------------------------------------

    XLCDCommand(0b00101000);    //if 2Line 5x8
    
	XLCDCommand(0b00001100); //display on cursor on blink oFF

    XLCDCommand(0b00000001);        //display clear

	/////////////////////////////////////////////////////////////////////////////////
	//Entry mode setting
	////////////////////////////////////////////////////////////////////////////////
	//Entry mode command " 0 0 0 0 0 1 ID S "
	//ID =0 no cursor increment during read and write
	//ID =1 cursor increment during read and write
	//S =0 no display during read and write
	//S =1 display shift 
       
    XLCDCommand(0b00000111);    //if cursor inc and display shift

	///////////////////////////////////////////////////////////////////////////////////
	//Display on off ,Blink ,cursor command set 
	// ///////////////////////////////////////////////////////////////////////////////
	//"0 0 0 0 1 D C B "
	//D=1 dislay on, C=1 cursor on, B=1 blink on

    //XLCDCommand(0b00001111);    //display on cursor on blink on
	// XLCDCommand(0b00001111); //display on cursor on blink oFF
           
	_vXLCDreg=0;
	// end of initialization

	// welcome
	XLCD_Welcome();

    return;
}

/*********************************************************************
 * Function         : void XLCDCommand(unsigned char cmd)
 * PreCondition     : None
 * Input            : cmd - Command to be set to LCD.
 * Output           : None
 * Side Effects     : None
 * Overview         : None
 * Note             : None
 ********************************************************************/
void XLCDCommand(unsigned char cmd)
{

	XLCDDelay2ms();

	XLCD_RSPIN=0;
	XLCD_ENPIN=0;
	

    XLCD_DATAPORT &=0xF0;               //clear port
    XLCD_DATAPORT |=((cmd>>4)&0x0f);
    Pulse_E();
    
    XLCD_DATAPORT &= 0xF0;              //clear port
    XLCD_DATAPORT |= cmd&0x0f ;	        //shift left 4 times
    Pulse_E();

	XLCDDelay4ms();
	
    return;
}
/*********************************************************************
 * Function         :XLCDPut()
 * PreCondition     :None
 * Input            :cmd - Command to be set to LCD.
 * Output           :None
 * Side Effects     :None
 * Overview         :None
 * Note             :None
 ********************************************************************/
void XLCDPut(char data)
{
	XLCD_RSPIN=1;
	XLCD_ENPIN=0;

	 XLCD_DATAPORT &=0xF0;               //clear port
	 XLCD_DATAPORT |=((data>>4)&0x0f);
	 Pulse_E();                     // Clock the cmd in
	 
	 XLCD_DATAPORT &= 0xF0;              //clear port
	 XLCD_DATAPORT |= data&0x0f ;	    //shift left 4 times
	 Pulse_E();

	// another delay added by me,
	// idea copied from LiquidCrystal.cpp
	// // commands need > 37us to settle
	
	XLCDDelay2ms();

	 return;
}

// *** DELETED RW Functions ~ RW pin is grounded *** //


/*********************************************************************
 * Function         :XLCDPutRomString(rom char *string)
 * PreCondition     :None    
 * Input            :None
 * Output           :Displays string in Program memory
 * Side Effects     :None
 * Overview         :None
 * Note             :is lways blocking till the string is written fully
 ********************************************************************/

void XLCDPutRomString(rom char *string)
{
     while(*string)                         // Write data to LCD up to null
    {    
        XLCDPut(*string);                   // Write character to LCD
        string++;                           // Increment buffer
    }
    return;
}
/*********************************************************************
 * Function         :XLCDPutRomString(rom char *string)
 * PreCondition     :None    
 * Input            :None
 * Output           :Displays string in Program memory
 * Side Effects     :None
 * Overview         :None
 * Note             :is lways blocking till the string is written fully
 ********************************************************************/
void XLCDPutRamString(char *string)
{
    while(*string)                          // Write data to LCD up to null
    {                      
        XLCDPut(*string);                   // Write character to LCD
        string++;                           // Increment buffer
    }
    return;
}

void printSpeed(int i)
{
	char str[2];
	int idx;
/*
	// speed held in three values such
	integer part = 0
	decimal part = 51
	speed to be displayed on LCD = 00.51
	speed to be written to PIC16F84A = 249
	
	eepromWrite(0, 0 );
	eepromWrite(1, 51);
	eepromWrite(2, 249);
*/	
	idx = i * 3;
	i = eepromRead(idx);
	itoa(i, str);

	// integer part
	if(i < 10)
	{
		XLCDPut('0');		
		XLCDPut(str[0]);
	}
	else				
	{
		XLCDPut(str[1]);
		XLCDPut(str[0]);
	}
	
	// separator
	XLCDPut(',');
	
	i = eepromRead(idx+1);
	itoa(i, str);
	// decimal part
	if(i < 10)
	{
		XLCDPut('0');		
		XLCDPut(str[0]);
	}
	else				
	{
		XLCDPut(str[1]);
		XLCDPut(str[0]);
	}
}

void eeprom_set_values(void)
{
	eepromWrite(0, 0 );
	eepromWrite(1, 51);
	eepromWrite(2, 249);
	eepromWrite(3, 0 );
	eepromWrite(4, 55);
	eepromWrite(5, 231);
	eepromWrite(6, 0 );
	eepromWrite(7, 59);
	eepromWrite(8, 215);
	eepromWrite(9, 0 );
	eepromWrite(10, 60);
	eepromWrite(11, 212);
	eepromWrite(12, 0 );
	eepromWrite(13, 65);
	eepromWrite(14, 195);
	eepromWrite(15, 0 );
	eepromWrite(16, 69);
	eepromWrite(17, 184);
	eepromWrite(18, 0 );
	eepromWrite(19, 70);
	eepromWrite(20, 181);
	eepromWrite(21, 0 );
	eepromWrite(22, 75);
	eepromWrite(23, 169);
	eepromWrite(24, 0 );
	eepromWrite(25, 79);
	eepromWrite(26, 161);
	eepromWrite(27, 0 );
	eepromWrite(28, 80);
	eepromWrite(29, 159);
	eepromWrite(30, 0 );
	eepromWrite(31, 85);
	eepromWrite(32, 149);
	eepromWrite(33, 0 );
	eepromWrite(34, 89);
	eepromWrite(35, 143);
	eepromWrite(36, 0 );
	eepromWrite(37, 90);
	eepromWrite(38, 141);
	eepromWrite(39, 0 );
	eepromWrite(40, 95);
	eepromWrite(41, 134);
	eepromWrite(42, 0 );
	eepromWrite(43, 99);
	eepromWrite(44, 128);
	eepromWrite(45, 1 );
	eepromWrite(46, 0 );
	eepromWrite(47, 127);
	eepromWrite(48, 1 );
	eepromWrite(49, 5 );
	eepromWrite(50, 121);
	eepromWrite(51, 1 );
	eepromWrite(52, 10);
	eepromWrite(53, 115);
	eepromWrite(54, 1 );
	eepromWrite(55, 11);
	eepromWrite(56, 114);
	eepromWrite(57, 1 );
	eepromWrite(58, 13);
	eepromWrite(59, 112);
	eepromWrite(60, 1 );
	eepromWrite(61, 15);
	eepromWrite(62, 110);
	eepromWrite(63, 1 );
	eepromWrite(64, 18);
	eepromWrite(65, 108);
	eepromWrite(66, 1 );
	eepromWrite(67, 20);
	eepromWrite(68, 106);
	eepromWrite(69, 1 );
	eepromWrite(70, 22);
	eepromWrite(71, 104);
	eepromWrite(72, 1 );
	eepromWrite(73, 25);
	eepromWrite(74, 102);
	eepromWrite(75, 1 );
	eepromWrite(76, 27);
	eepromWrite(77, 100);
	eepromWrite(78, 1 );
	eepromWrite(79, 30);
	eepromWrite(80, 98);
	eepromWrite(81, 1 );
	eepromWrite(82, 32);
	eepromWrite(83, 96);
	eepromWrite(84, 1 );
	eepromWrite(85, 35);
	eepromWrite(86, 94);
	eepromWrite(87, 1 );
	eepromWrite(88, 38);
	eepromWrite(89, 92);
	eepromWrite(90, 1 );
	eepromWrite(91, 41);
	eepromWrite(92, 90);
	eepromWrite(93, 1 );
	eepromWrite(94, 44);
	eepromWrite(95, 88);
	eepromWrite(96, 1 );
	eepromWrite(97, 48);
	eepromWrite(98, 86);
	eepromWrite(99, 1 );
	eepromWrite(100, 51);
	eepromWrite(101, 84);
	eepromWrite(102, 1 );
	eepromWrite(103, 55);
	eepromWrite(104, 82);
	eepromWrite(105, 1 );
	eepromWrite(106, 59);
	eepromWrite(107, 80);
	eepromWrite(108, 1 );
	eepromWrite(109, 63);
	eepromWrite(110, 78);
	eepromWrite(111, 1 );
	eepromWrite(112, 67);
	eepromWrite(113, 76);
	eepromWrite(114, 1 );
	eepromWrite(115, 72);
	eepromWrite(116, 74);
	eepromWrite(117, 1 );
	eepromWrite(118, 76);
	eepromWrite(119, 72);
	eepromWrite(120, 1 );
	eepromWrite(121, 81);
	eepromWrite(122, 70);
	eepromWrite(123, 1 );
	eepromWrite(124, 87);
	eepromWrite(125, 68);
	eepromWrite(126, 1 );
	eepromWrite(127, 92);
	eepromWrite(128, 66);
	eepromWrite(129, 1 );
	eepromWrite(130, 98);
	eepromWrite(131, 64);
	eepromWrite(132, 2 );
	eepromWrite(133, 5 );
	eepromWrite(134, 62);
	eepromWrite(135, 2 );
	eepromWrite(136, 12);
	eepromWrite(137, 60);
	eepromWrite(138, 2 );
	eepromWrite(139, 19);
	eepromWrite(140, 58);
	eepromWrite(141, 2 );
	eepromWrite(142, 27);
	eepromWrite(143, 56);
	eepromWrite(144, 2 );
	eepromWrite(145, 35);
	eepromWrite(146, 54);
	eepromWrite(147, 2 );
	eepromWrite(148, 44);
	eepromWrite(149, 52);
	eepromWrite(150, 2 );
	eepromWrite(151, 54);
	eepromWrite(152, 50);
	eepromWrite(153, 2 );
	eepromWrite(154, 65);
	eepromWrite(155, 48);
	eepromWrite(156, 2 );
	eepromWrite(157, 76);
	eepromWrite(158, 46);
	eepromWrite(159, 2 );
	eepromWrite(160, 89);
	eepromWrite(161, 44);
	eepromWrite(162, 3 );
	eepromWrite(163, 2 );
	eepromWrite(164, 42);
	eepromWrite(165, 3 );
	eepromWrite(166, 18);
	eepromWrite(167, 40);
	eepromWrite(168, 3 );
	eepromWrite(169, 34);
	eepromWrite(170, 38);
	eepromWrite(171, 3 );
	eepromWrite(172, 53);
	eepromWrite(173, 36);
	eepromWrite(174, 3 );
	eepromWrite(175, 74);
	eepromWrite(176, 34);
	eepromWrite(177, 3 );
	eepromWrite(178, 97);
	eepromWrite(179, 32);
	eepromWrite(180, 4 );
	eepromWrite(181, 23);
	eepromWrite(182, 30);
	eepromWrite(183, 4 );
	eepromWrite(184, 54);
	eepromWrite(185, 28);
	eepromWrite(186, 4 );
	eepromWrite(187, 89);
	eepromWrite(188, 26);
	eepromWrite(189, 5 );
	eepromWrite(190, 29);
	eepromWrite(191, 24);
	eepromWrite(192, 5 );
	eepromWrite(193, 77);
	eepromWrite(194, 22);
	eepromWrite(195, 6 );
	eepromWrite(196, 5 );
	eepromWrite(197, 21);
	eepromWrite(198, 6 );
	eepromWrite(199, 35);
	eepromWrite(200, 20);
	eepromWrite(201, 6 );
	eepromWrite(202, 68);
	eepromWrite(203, 19);
	eepromWrite(204, 7 );
	eepromWrite(205, 6 );
	eepromWrite(206, 18);
	eepromWrite(207, 7 );
	eepromWrite(208, 47);
	eepromWrite(209, 17);
	eepromWrite(210, 7 );
	eepromWrite(211, 94);
	eepromWrite(212, 16);
	eepromWrite(213, 8 );
	eepromWrite(214, 47);
	eepromWrite(215, 15);
	eepromWrite(216, 9 );
	eepromWrite(217, 7 );
	eepromWrite(218, 14);
	eepromWrite(219, 9 );
	eepromWrite(220, 77);
	eepromWrite(221, 13);
	eepromWrite(222, 10);
	eepromWrite(223, 58);
	eepromWrite(224, 12);
	eepromWrite(225, 11);
	eepromWrite(226, 55);
	eepromWrite(227, 11);
	eepromWrite(228, 12);
	eepromWrite(229, 70);
	eepromWrite(230, 10);
	eepromWrite(231, 14);
	eepromWrite(232, 11);
	eepromWrite(233, 9);
	eepromWrite(234, 15);
	eepromWrite(235, 88);
	eepromWrite(236, 8);
	eepromWrite(237, 18);
	eepromWrite(238, 14);
	eepromWrite(239, 7);
	eepromWrite(240, 21);
	eepromWrite(241, 17);
	eepromWrite(242, 6);
	eepromWrite(243, 25);
	eepromWrite(244, 40);
	eepromWrite(245, 5);
	eepromWrite(246, 31);
	eepromWrite(247, 75);
	eepromWrite(248, 4);
	eepromWrite(249, 42);
	eepromWrite(250, 34);
	eepromWrite(251, 3);
	eepromWrite(252, 63);
	eepromWrite(253, 51);
	eepromWrite(254, 2);
	// store the last selected speed index, 85 == -1 ~ 0 cm/min  
	// to be able to recall the value on power up
	eepromWrite(255, 85);
}

void eepromWrite(byte addr, byte data) {
	INTCONbits.GIE = 0; // Disable interupts
	EECON1bits.EEPGD = 0; // Select the EEPROM memory
	EECON1bits.CFGS = 0; // Access the EEPROM memory
	EECON1bits.WREN = 1; // Enable writing
	EEADR = addr; // Set the address
	EEDATA = data; // Set the data
	EECON2 = 0x55; // Write initiate sequence
	EECON2 = 0xaa; // Write initiate sequence
	EECON1bits.WR = 1; // Start writing
	while (!PIR2bits.EEIF)
	; // Wait for write to finish
	PIR2bits.EEIF = 0; // Clear EEIF bit
	INTCONbits.GIE = 1; // Enable interupts
}

byte eepromRead(byte addr) {
	EECON1bits.EEPGD = 0; // Select the EEPROM memory
	EECON1bits.CFGS = 0; // Access the EEPROM memory
	EEADR = addr; // Set the address
	EECON1bits.RD = 1; // Start reading
	return EEDATA; // Return the read value
}

 /* itoa:  convert n to characters in s */
 void itoa(int n, char s[])
 {
     int i;
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
     } while ((n /= 10) > 0);     /* delete it */
     s[i] = '\0';
 }

// timer function 

void change_speed(int increment)
{
   int i;	
	// char *speed_val[];
   iSpeed += increment;
   iSpeed=(iSpeed>iMaxSpeed?iMaxSpeed:iSpeed); 
   iSpeed=(iSpeed<iMinSpeed?iMinSpeed:iSpeed);  

	if(iSpeed == -1) // special case
	{
		XLCDL1home();
		XLCDPutRamString(line3);
	}
	else 
	{
		// position the cursor, first line, 5th character
	    XLCDCommand(0b10000100);
		// print the speed
		printSpeed(iSpeed);
	}
} 

void createChar(unsigned int location, unsigned int charmap[])
{
	int i;
	location &= 0x7;
	XLCDCommand(LCD_SETCGRAMADDR | (location << 3));
  	for(i=0; i<8; i++) 
    	XLCDPut(charmap[i]);		
}

void XLCDPrintArrows(char ARROW)
{
	int i;
	// position the lcd
    XLCDCommand(0b11000110);
	for(i = 0; i < 4; i++)
		XLCDPut(ARROW);
}

// variations on the XLCDPrintArrows function, to be called in main.c 
void XLCDPrintDownArrows(void)
{
	XLCDPrintArrows(DOWN_ARROW);
}

void XLCDPrintUpArrows(void)
{
	XLCDPrintArrows(UP_ARROW);
}

void XLCD_Welcome(void)
{
	// create special characters
	// no play with zero, so starting at 1
/*
	createChar(0, backSlash);
	createChar(1, upArrow);
	createChar(2, downArrow);
*/

	createChar(BACK_SLASH, backSlash);
	createChar(UP_ARROW, upArrow);
	createChar(DOWN_ARROW, downArrow);

	XLCDL1home();
	XLCDPutRamString(line1);
	XLCDL2home();
	XLCDPutRamString(line2);
	// delay 2 seconds
	// clear and add standard text
	XLCDDelay2s();
	XLCDL1home();
	XLCDPutRamString(line3);

	XLCDCommand(0b10000100);

	// write control characters
	XLCDL2home();
	XLCDPutRamString(line4);
    XLCDCommand(0b11000011);
	XLCDPut('-');
    XLCDCommand(0b11000110);
	XLCDPrintArrows(DOWN_ARROW);
   	XLCDCommand(0b11001100);
	XLCDPut('-');

	// write values to eeprom for LCD 
	eeprom_set_values();
}

void check_pins(void)
{
	// on off
	if(XLCD_ONOFF_PIN == HIGH && bChangedOnOffState == 0)
	{
		bOn=(bOn == 1?0:1); // invert state
		// iStepChar = (bOn?iStepChar:0);
		bChangedOnOffState = 1;
	} 
	
	if(XLCD_ONOFF_PIN == LOW && bChangedOnOffState == 1) // if the pin has gone low AND state has changed, act
	{
		XLCD_LED_PIN = bOn;
		bChangedOnOffState = 0;
	} 	

 	// up
	if(XLCD_UP_PIN == HIGH && bChangedUpState == 0)
	{
	   bChangedUpState = 1;
	} 
	
	if(XLCD_UP_PIN == LOW && bChangedUpState == 1) // if the pin has gone low AND state has changed, act
	{
	   bDown = 0;
	   bChangedUpState = 0;
	   XLCDPrintArrows(UP_ARROW);
	} 
	
	// going down
	if(XLCD_DOWN_PIN == HIGH && bChangedDownState == 0)
	{
	   bChangedDownState = 1;
	}

	if(XLCD_DOWN_PIN == LOW && bChangedDownState == 1)
	{
	   bChangedDownState = 0;
	   bDown = 1;
	   XLCDPrintArrows(DOWN_ARROW);
	}

  // faster and slower
  if(XLCD_FASTER_PIN == HIGH && bChangedFasterState == 0)
  {
    //Serial.println("***faster***");
    bChangedFasterState = 1;
    // set timer for holding "faster pin"
    lCurrentCounter = 0;
  }

  if(XLCD_FASTER_PIN == HIGH && bChangedFasterState == 1)
  {
    lCurrentCounter++;
    if(lCurrentCounter > CONTINUOUS_CHANGE_INTERVAL) // increase count
    {  change_speed(1);  
	   lCurrentCounter = 0;	
	}
  }
 
  if(XLCD_FASTER_PIN == LOW && bChangedFasterState == 1) // if the pin has gone low AND state has changed, act
  { 
      change_speed(1);
      bChangedFasterState = 0;
	  lCurrentCounter = 0;	
  }
  
  if(XLCD_SLOWER_PIN == HIGH && bChangedSlowerState == 0)
  {
    bChangedSlowerState = 1;
    lCurrentCounter = 0;
  } 

  if(XLCD_SLOWER_PIN == HIGH && bChangedSlowerState == 1)
  {
    lCurrentCounter++;
    if(lCurrentCounter > CONTINUOUS_CHANGE_INTERVAL) // increase count
    {  change_speed(-1);  
	   lCurrentCounter = 0;	 
    }
  }

  if(XLCD_SLOWER_PIN == LOW && bChangedSlowerState == 1) // if the pin has gone low AND state has changed, act
  {
     change_speed(-1);
     bChangedSlowerState = 0;
  }  

}